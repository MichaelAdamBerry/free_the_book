{"ast":null,"code":"import _regeneratorRuntime from \"/Users/michaelberry/Desktop/bookshelf/bookshelf/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/michaelberry/Desktop/bookshelf/bookshelf/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/michaelberry/Desktop/bookshelf/bookshelf/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/michaelberry/Desktop/bookshelf/bookshelf/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/michaelberry/Desktop/bookshelf/bookshelf/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/michaelberry/Desktop/bookshelf/bookshelf/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/michaelberry/Desktop/bookshelf/bookshelf/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/michaelberry/Desktop/bookshelf/bookshelf/src/components/List.js\";\nimport React from \"react\";\nimport { getVolumeList } from \"../api/google\";\nimport queryString from \"query-string\";\nimport Card from \"./Card\";\nimport { Spring } from \"react-spring\";\nimport PropTypes from \"prop-types\";\n\nvar ListItem = function ListItem(_ref) {\n  var volume = _ref.volume;\n  //list items to fade in at random intervals from 0 to 2000ms\n  var delay = Math.floor(Math.random() * 2000);\n  return React.createElement(Spring, {\n    from: {\n      opacity: 0\n    },\n    to: {\n      opacity: 1\n    },\n    delay: delay,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, function (_ref2) {\n    var opacity = _ref2.opacity;\n    return React.createElement(\"div\", {\n      style: {\n        opacity: opacity\n      },\n      className: \"column\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    }, React.createElement(Card, {\n      volume: volume,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }));\n  });\n};\n\nvar ListView = function ListView(_ref3) {\n  var volumes = _ref3.volumes;\n  //slice search result array into two columns for rendering into rows with flex\n  var middleIndex = Math.floor(volumes.length / 2);\n  var colA = volumes.slice(0, middleIndex);\n  var colB = volumes.slice(middleIndex);\n  return React.createElement(\"div\", {\n    className: \"listWrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, colA.map(function (element, index) {\n    return React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"column\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, React.createElement(ListItem, {\n      volume: element,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"column\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, React.createElement(ListItem, {\n      volume: colB[index],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    })));\n  }));\n};\n\nListView.propTypes = {\n  volumes: PropTypes.array.isRequired\n};\n\nvar List =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(List, _React$Component);\n\n  function List() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, List);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(List)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      loading: true\n    };\n    _this.componentDidMount =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var query, volumes;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              query = queryString.parse(_this.props.location.search);\n              _context.next = 3;\n              return getVolumeList(query.q);\n\n            case 3:\n              volumes = _context.sent;\n\n              _this.setState({\n                volumes: volumes,\n                query: query.q\n              }, function () {\n                _this.setState({\n                  loading: false\n                });\n              });\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n    return _this;\n  }\n\n  _createClass(List, [{\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          loading = _this$state.loading,\n          volumes = _this$state.volumes,\n          query = _this$state.query;\n      return React.createElement(\"div\", {\n        className: \"listContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, \"Search results for \", query, \":\"), !loading && React.createElement(ListView, {\n        volumes: volumes,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return List;\n}(React.Component);\n\nexport { List as default };","map":{"version":3,"sources":["/Users/michaelberry/Desktop/bookshelf/bookshelf/src/components/List.js"],"names":["React","getVolumeList","queryString","Card","Spring","PropTypes","ListItem","volume","delay","Math","floor","random","opacity","ListView","volumes","middleIndex","length","colA","slice","colB","map","element","index","propTypes","array","isRequired","List","state","loading","componentDidMount","query","parse","props","location","search","q","setState","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { getVolumeList } from \"../api/google\";\nimport queryString from \"query-string\";\nimport Card from \"./Card\";\nimport { Spring } from \"react-spring\";\nimport PropTypes from \"prop-types\";\n\nconst ListItem = ({ volume }) => {\n  //list items to fade in at random intervals from 0 to 2000ms\n  const delay = Math.floor(Math.random() * 2000);\n  return (\n    <Spring from={{ opacity: 0 }} to={{ opacity: 1 }} delay={delay}>\n      {({ opacity }) => (\n        <div style={{ opacity }} className=\"column\">\n          <Card volume={volume} />\n        </div>\n      )}\n    </Spring>\n  );\n};\n\nconst ListView = ({ volumes }) => {\n  //slice search result array into two columns for rendering into rows with flex\n  const middleIndex = Math.floor(volumes.length / 2);\n  const colA = volumes.slice(0, middleIndex);\n  const colB = volumes.slice(middleIndex);\n  return (\n    <div className=\"listWrapper\">\n      {colA.map((element, index) => {\n        return (\n          <div className=\"row\">\n            <div className=\"column\">\n              <ListItem volume={element} />\n            </div>\n            <div className=\"column\">\n              <ListItem volume={colB[index]} />\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nListView.propTypes = {\n  volumes: PropTypes.array.isRequired\n};\n\nexport default class List extends React.Component {\n  state = { loading: true };\n\n  componentDidMount = async () => {\n    const query = queryString.parse(this.props.location.search);\n    const volumes = await getVolumeList(query.q);\n    this.setState({ volumes: volumes, query: query.q }, () => {\n      this.setState({ loading: false });\n    });\n  };\n\n  render() {\n    const { loading, volumes, query } = this.state;\n    return (\n      <div className=\"listContainer\">\n        <h3>Search results for {query}:</h3>\n        {!loading && <ListView volumes={volumes} />}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}