{"ast":null,"code":"import _regeneratorRuntime from \"/Users/michaelberry/Desktop/bookshelf/bookshelf/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/michaelberry/Desktop/bookshelf/bookshelf/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/michaelberry/Desktop/bookshelf/bookshelf/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/michaelberry/Desktop/bookshelf/bookshelf/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/michaelberry/Desktop/bookshelf/bookshelf/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/michaelberry/Desktop/bookshelf/bookshelf/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/michaelberry/Desktop/bookshelf/bookshelf/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/michaelberry/Desktop/bookshelf/bookshelf/src/components/List.js\";\nimport React from \"react\";\nimport { getVolumes } from \"../api/google\";\nimport queryString from \"query-string\";\n\nfunction ListView(_ref) {\n  var volumes = _ref.volumes;\n  console.log(\"volumes in ListView \", volumes);\n  return React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, volumes.map(function (volume) {\n    return React.createElement(\"li\", {\n      key: volume.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11\n      },\n      __self: this\n    }, volume.volumeInfo.title);\n  }));\n}\n\nvar List =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(List, _React$Component);\n\n  function List(props) {\n    var _this;\n\n    _classCallCheck(this, List);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(List).call(this, props));\n    _this.state = {\n      loading: true,\n      volumes: null,\n      error: null\n    };\n    return _this;\n  }\n\n  _createClass(List, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        var _queryString$parse, query, volumes;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _queryString$parse = queryString.parse(this.props.location.search), query = _queryString$parse.query;\n                console.log(\"componentdidmount and calling get volumes with\", query);\n                _context.next = 4;\n                return getVolumes(query);\n\n              case 4:\n                volumes = _context.sent;\n                this.setState({\n                  volumes: volumes\n                }, function () {\n                  _this2.setState({\n                    loading: false\n                  });\n                });\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          loading = _this$state.loading,\n          volumes = _this$state.volumes;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, !loading && React.createElement(ListView, {\n        volumes: volumes,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return List;\n}(React.Component);\n\nexport { List as default };","map":{"version":3,"sources":["/Users/michaelberry/Desktop/bookshelf/bookshelf/src/components/List.js"],"names":["React","getVolumes","queryString","ListView","volumes","console","log","map","volume","id","volumeInfo","title","List","props","state","loading","error","parse","location","search","query","setState","Component"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,UAAT,QAA2B,eAA3B;AACA,OAAOC,WAAP,MAAwB,cAAxB;;AAEA,SAASC,QAAT,OAA+B;AAAA,MAAXC,OAAW,QAAXA,OAAW;AAC7BC,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCF,OAApC;AACA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,OAAO,CAACG,GAAR,CAAY,UAAAC,MAAM;AAAA,WACjB;AAAI,MAAA,GAAG,EAAEA,MAAM,CAACC,EAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAqBD,MAAM,CAACE,UAAP,CAAkBC,KAAvC,CADiB;AAAA,GAAlB,CADH,CADF;AAOD;;IAEoBC,I;;;;;AACnB,gBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8EAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AAAEC,MAAAA,OAAO,EAAE,IAAX;AAAiBX,MAAAA,OAAO,EAAE,IAA1B;AAAgCY,MAAAA,KAAK,EAAE;AAAvC,KAAb;AAFiB;AAGlB;;;;;;;;;;;;;;;;qCAGmBd,WAAW,CAACe,KAAZ,CAAkB,KAAKJ,KAAL,CAAWK,QAAX,CAAoBC,MAAtC,C,EAAVC,K,sBAAAA,K;AACRf,gBAAAA,OAAO,CAACC,GAAR,CAAY,gDAAZ,EAA8Dc,KAA9D;;uBACsBnB,UAAU,CAACmB,KAAD,C;;;AAA1BhB,gBAAAA,O;AACN,qBAAKiB,QAAL,CAAc;AAAEjB,kBAAAA,OAAO,EAAEA;AAAX,iBAAd,EAAoC,YAAM;AACxC,kBAAA,MAAI,CAACiB,QAAL,CAAc;AAAEN,oBAAAA,OAAO,EAAE;AAAX,mBAAd;AACD,iBAFD;;;;;;;;;;;;;;;;;;6BAIO;AAAA,wBACsB,KAAKD,KAD3B;AAAA,UACCC,OADD,eACCA,OADD;AAAA,UACUX,OADV,eACUA,OADV;AAEP,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAM,CAACW,OAAD,IAAY,oBAAC,QAAD;AAAU,QAAA,OAAO,EAAEX,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAlB,CAAP;AACD;;;;EAjB+BJ,KAAK,CAACsB,S;;SAAnBV,I","sourcesContent":["import React from \"react\";\n\nimport { getVolumes } from \"../api/google\";\nimport queryString from \"query-string\";\n\nfunction ListView({ volumes }) {\n  console.log(\"volumes in ListView \", volumes);\n  return (\n    <ul>\n      {volumes.map(volume => (\n        <li key={volume.id}>{volume.volumeInfo.title}</li>\n      ))}\n    </ul>\n  );\n}\n\nexport default class List extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { loading: true, volumes: null, error: null };\n  }\n\n  async componentDidMount() {\n    const { query } = queryString.parse(this.props.location.search);\n    console.log(\"componentdidmount and calling get volumes with\", query);\n    const volumes = await getVolumes(query);\n    this.setState({ volumes: volumes }, () => {\n      this.setState({ loading: false });\n    });\n  }\n  render() {\n    const { loading, volumes } = this.state;\n    return <div>{!loading && <ListView volumes={volumes} />}</div>;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}